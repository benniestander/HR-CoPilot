import React, { useState } from 'react';
import { LoadingIcon, CreditCardIcon } from './Icons';

// Extend the Window interface to include the YocoSDK, preventing TypeScript errors.
declare global {
  interface Window {
    YocoSDK: any;
  }
}

interface PaymentModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSuccess: () => void;
  amountInCents: number;
  itemName: string;
}

const PaymentModal: React.FC<PaymentModalProps> = ({ isOpen, onClose, onSuccess, amountInCents, itemName }) => {
  const [name, setName] = useState('');
  const [surname, setSurname] = useState('');
  const [email, setEmail] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  if (!isOpen) return null;

  const handlePayment = (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    setError(null);

    // This assumes the YocoSDK script has been loaded in index.html
    const yoco = new (window as any).YocoSDK({
      // IMPORTANT: Replace this with your actual Yoco public key
      publicKey: 'pk_test_53ac2c42lWPdK17b8ac4',
    });

    const customer = {
        name,
        surname,
        email,
    };

    yoco.showPopup({
      amountInCents: amountInCents,
      currency: 'ZAR',
      name: itemName,
      description: 'Generated by Ingcweti AI HR Co-Pilot',
      customer: customer,
      callback: async (result: any) => {
        setIsLoading(false);

        if (result.error) {
          // User closed the popup or an error occurred.
          // Don't show an error message if the user simply closed the popup.
          if (result.error.message !== "User closed popup") {
            setError(`Payment failed: ${result.error.message}`);
          } else {
             onClose(); // Close modal if user cancels
          }
        } else {
          // --- REAL-WORLD SCENARIO ---
          // In a real application, you would now send the `result.id` (the token)
          // to your backend server. Your server would then use this token and your
          // SECRET key to make a charge request to the Yoco API.
          //
          // --- SIMULATION FOR FRONTEND-ONLY ---
          // For this demonstration, we'll simulate a successful payment
          // immediately after receiving the token from the popup.
          console.log("Received Yoco token:", result.id);
          console.log("Simulating successful backend payment processing...");
          onSuccess();
        }
      },
    });
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-60 z-50 flex items-center justify-center p-4" onClick={onClose}>
      <div 
        className="bg-white rounded-lg shadow-xl w-full max-w-sm flex flex-col"
        onClick={(e) => e.stopPropagation()}
        role="dialog"
        aria-modal="true"
        aria-labelledby="payment-title"
      >
        <div className="p-6 border-b border-gray-200 text-center">
          <h2 id="payment-title" className="text-xl font-bold text-secondary">Unlock Document Download</h2>
          <p className="text-gray-600 mt-1">Complete your details to proceed.</p>
        </div>
        
        <form onSubmit={handlePayment}>
            <div className="p-8">
                <h3 className="text-lg font-semibold text-secondary mb-4 text-left">Your Details</h3>
                <div className="space-y-4">
                    <div>
                        <label htmlFor="name" className="block text-sm font-medium text-gray-700 text-left">First Name</label>
                        <input
                            type="text"
                            id="name"
                            value={name}
                            onChange={(e) => setName(e.target.value)}
                            required
                            className="w-full p-3 border border-gray-300 rounded-md shadow-sm focus:ring-primary focus:border-primary mt-1"
                        />
                    </div>
                    <div>
                        <label htmlFor="surname" className="block text-sm font-medium text-gray-700 text-left">Last Name</label>
                        <input
                            type="text"
                            id="surname"
                            value={surname}
                            onChange={(e) => setSurname(e.target.value)}
                            required
                            className="w-full p-3 border border-gray-300 rounded-md shadow-sm focus:ring-primary focus:border-primary mt-1"
                        />
                    </div>
                    <div>
                        <label htmlFor="email" className="block text-sm font-medium text-gray-700 text-left">Email Address</label>
                        <input
                            type="email"
                            id="email"
                            value={email}
                            onChange={(e) => setEmail(e.target.value)}
                            required
                            className="w-full p-3 border border-gray-300 rounded-md shadow-sm focus:ring-primary focus:border-primary mt-1"
                        />
                    </div>
                </div>

                <div className="mt-8 pt-6 border-t border-gray-200 text-center">
                    <p className="text-sm text-gray-500">{itemName}</p>
                    <p className="text-5xl font-bold text-secondary my-2">
                        R{(amountInCents / 100).toFixed(2)}
                    </p>
                    <p className="text-xs text-gray-500">One-time payment</p>
                </div>
            </div>
            
            <div className="p-6 bg-gray-50 border-t border-gray-200">
            <button
                type="submit"
                disabled={isLoading || !name || !surname || !email}
                className="w-full bg-primary text-white font-bold py-3 px-4 rounded-md hover:bg-opacity-90 disabled:bg-gray-400 transition-colors flex items-center justify-center"
            >
                {isLoading ? (
                <>
                    <LoadingIcon className="animate-spin -ml-1 mr-3 h-5 w-5" />
                    Processing...
                </>
                ) : (
                    <>
                        <CreditCardIcon className="w-5 h-5 mr-2" />
                        Pay Now with Yoco
                    </>
                )}
            </button>
            {error && <p className="text-xs text-red-600 text-center mt-3">{error}</p>}
            <p className="text-xs text-gray-400 text-center mt-4">
                Secure payments are processed by Yoco.
            </p>
            </div>
        </form>
      </div>
    </div>
  );
};

export default PaymentModal;